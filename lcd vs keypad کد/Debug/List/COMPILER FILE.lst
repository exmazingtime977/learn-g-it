
AVRASM ver. 2.1.30  C:\Users\violet\Desktop\banafshej-98242037-tamrin3\lcd vs keypad ˜Ï\Debug\List\COMPILER FILE.asm Sat Mar 27 13:57:09 2021

C:\Users\violet\Desktop\banafshej-98242037-tamrin3\lcd vs keypad ˜Ï\Debug\List\COMPILER FILE.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\violet\Desktop\banafshej-98242037-tamrin3\lcd vs keypad ˜Ï\Debug\List\COMPILER FILE.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\violet\Desktop\banafshej-98242037-tamrin3\lcd vs keypad ˜Ï\Debug\List\COMPILER FILE.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\violet\Desktop\banafshej-98242037-tamrin3\lcd vs keypad ˜Ï\Debug\List\COMPILER FILE.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\violet\Desktop\banafshej-98242037-tamrin3\lcd vs keypad ˜Ï\Debug\List\COMPILER FILE.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\violet\Desktop\banafshej-98242037-tamrin3\lcd vs keypad ˜Ï\Debug\List\COMPILER FILE.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\violet\Desktop\banafshej-98242037-tamrin3\lcd vs keypad ˜Ï\Debug\List\COMPILER FILE.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\Users\violet\Desktop\banafshej-98242037-tamrin3\lcd vs keypad ˜Ï\Debug\List\COMPILER FILE.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\Users\violet\Desktop\banafshej-98242037-tamrin3\lcd vs keypad ˜Ï\Debug\List\COMPILER FILE.asm(1096): warning: Register r12 already defined by the .DEF directive
C:\Users\violet\Desktop\banafshej-98242037-tamrin3\lcd vs keypad ˜Ï\Debug\List\COMPILER FILE.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _key=R4
                 	.DEF _key_msb=R5
                 	.DEF _flag=R6
                 	.DEF _flag_msb=R7
                 	.DEF _j=R8
                 	.DEF _j_msb=R9
                 	.DEF _on=R10
                 	.DEF _on_msb=R11
                 	.DEF _k=R12
                 	.DEF _k_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0057 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 006f
000034 000d      	.DB  0x6F,0x0,0xD,0x0
000035 000d
000036 0000      	.DB  0xD,0x0,0x0,0x0
000037 0001      	.DB  0x1,0x0
                 
                 _0x0:
000038 6544
000039 6373
00003a 6e65
00003b 6964      	.DB  0x44,0x65,0x73,0x63,0x65,0x6E,0x64,0x69
00003c 676e
00003d 4100
00003e 6373
00003f 6e65      	.DB  0x6E,0x67,0x0,0x41,0x73,0x63,0x65,0x6E
000040 6964
000041 676e
000042 2500
000043 0064      	.DB  0x64,0x69,0x6E,0x67,0x0,0x25,0x64,0x0
                 _0x2020060:
C:\Users\violet\Desktop\banafshej-98242037-tamrin3\lcd vs keypad ˜Ï\Debug\List\COMPILER FILE.asm(1145): warning: .cseg .db misalignment - padding zero byte
000044 0001      	.DB  0x1
                 _0x2020000:
000045 4e2d
000046 4e41
000047 4900
000048 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\violet\Desktop\banafshej-98242037-tamrin3\lcd vs keypad ˜Ï\Debug\List\COMPILER FILE.asm(1148): warning: .cseg .db misalignment - padding zero byte
000049 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00004a 000a      	.DW  0x0A
00004b 0004      	.DW  0x04
00004c 0066      	.DW  __REG_VARS*2
                 
00004d 000b      	.DW  0x0B
00004e 0260      	.DW  _0x9
00004f 0070      	.DW  _0x0*2
                 
000050 000a      	.DW  0x0A
000051 026b      	.DW  _0x9+11
000052 007b      	.DW  _0x0*2+11
                 
000053 0001      	.DW  0x01
000054 0284      	.DW  __seed_G101
000055 0088      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000056 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000057 94f8      	CLI
000058 27ee      	CLR  R30
000059 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005a e0f1      	LDI  R31,1
00005b bffb      	OUT  GICR,R31
00005c bfeb      	OUT  GICR,R30
00005d bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00005e e08d      	LDI  R24,(14-2)+1
00005f e0a2      	LDI  R26,2
000060 27bb      	CLR  R27
                 __CLEAR_REG:
000061 93ed      	ST   X+,R30
000062 958a      	DEC  R24
000063 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000064 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000065 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000066 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000067 93ed      	ST   X+,R30
000068 9701      	SBIW R24,1
000069 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006a e9e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006b e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006c 9185      	LPM  R24,Z+
00006d 9195      	LPM  R25,Z+
00006e 9700      	SBIW R24,0
00006f f061      	BREQ __GLOBAL_INI_END
000070 91a5      	LPM  R26,Z+
000071 91b5      	LPM  R27,Z+
000072 9005      	LPM  R0,Z+
000073 9015      	LPM  R1,Z+
000074 01bf      	MOVW R22,R30
000075 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000076 9005      	LPM  R0,Z+
000077 920d      	ST   X+,R0
000078 9701      	SBIW R24,1
000079 f7e1      	BRNE __GLOBAL_INI_LOOP
00007a 01fb      	MOVW R30,R22
00007b cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007c e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00007d bfed      	OUT  SPL,R30
00007e e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00007f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000080 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000081 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000082 940c 00fc 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;#define F_CPU 8000000UL
                 ;#define eq     12
                 ;#define jaam   13
                 ;#define taqsim 14
                 ;#define zarb   15
                 ;#define menha  16
                 ;int key = 111;
                 ;int flag = 13;
                 ;int j = 13;
                 ;int on = 0;
                 ;int k = 1;
                 ;void command (unsigned char cmd);
                 ;void lcd_data(unsigned char data);
                 ;void lcd_print(char *p);
                 ;unsigned char adad[15];
                 ;int encr_decr(void){
                 ; 0000 0014 int encr_decr(void){
                 
                 	.CSEG
                 _encr_decr:
                 ; .FSTART _encr_decr
                 ; 0000 0015     while(on == 0){
                 _0x3:
000084 2c0a      	MOV  R0,R10
000085 280b      	OR   R0,R11
000086 f531      	BRNE _0x5
                 ; 0000 0016     if (flag == j) k = 1;
                +
000087 1486     +CP R8 , R6
000088 0497     +CPC R9 , R7
                 	__CPWRR 8,9,6,7
000089 f419      	BRNE _0x6
00008a e0e1      	LDI  R30,LOW(1)
00008b e0f0      	LDI  R31,HIGH(1)
00008c 016f      	MOVW R12,R30
                 ; 0000 0017     if (flag != j) {
                 _0x6:
                +
00008d 1486     +CP R8 , R6
00008e 0497     +CPC R9 , R7
                 	__CPWRR 8,9,6,7
00008f f021      	BREQ _0x7
                 ; 0000 0018     k = 2;
000090 e0e2      	LDI  R30,LOW(2)
000091 e0f0      	LDI  R31,HIGH(2)
000092 016f      	MOVW R12,R30
                 ; 0000 0019     flag = j;
000093 0134      	MOVW R6,R8
                 ; 0000 001A     }
                 ; 0000 001B     command(0XC0);//Forced the cursor to the first position of second line.
                 _0x7:
000094 eca0      	LDI  R26,LOW(192)
000095 d096      	RCALL _command
                 ; 0000 001C     if (k == 1){
000096 e0e1      	LDI  R30,LOW(1)
000097 e0f0      	LDI  R31,HIGH(1)
000098 15ec      	CP   R30,R12
000099 05fd      	CPC  R31,R13
00009a f431      	BRNE _0x8
                 ; 0000 001D         key = key - 1;
00009b 01f2      	MOVW R30,R4
00009c 9731      	SBIW R30,1
00009d 012f      	MOVW R4,R30
                 ; 0000 001E         lcd_print("Descending");
                +
00009e e6a0     +LDI R26 , LOW ( _0x9 + ( 0 ) )
00009f e0b2     +LDI R27 , HIGH ( _0x9 + ( 0 ) )
                 	__POINTW2MN _0x9,0
0000a0 d09f      	RCALL _lcd_print
                 ; 0000 001F         }
                 ; 0000 0020 
                 ; 0000 0021     if (k == 2){
                 _0x8:
0000a1 e0e2      	LDI  R30,LOW(2)
0000a2 e0f0      	LDI  R31,HIGH(2)
0000a3 15ec      	CP   R30,R12
0000a4 05fd      	CPC  R31,R13
0000a5 f431      	BRNE _0xA
                 ; 0000 0022         key = key + 1;
0000a6 01f2      	MOVW R30,R4
0000a7 9631      	ADIW R30,1
0000a8 012f      	MOVW R4,R30
                 ; 0000 0023         lcd_print("Ascending");
                +
0000a9 e6ab     +LDI R26 , LOW ( _0x9 + ( 11 ) )
0000aa e0b2     +LDI R27 , HIGH ( _0x9 + ( 11 ) )
                 	__POINTW2MN _0x9,11
0000ab d094      	RCALL _lcd_print
                 ; 0000 0024         }
                 ; 0000 0025     }
                 _0xA:
0000ac cfd7      	RJMP _0x3
                 _0x5:
                 ; 0000 0026 return (k);
0000ad 01f6      	MOVW R30,R12
0000ae 9508      	RET
                 ; 0000 0027 }
                 ; .FEND
                 
                 	.DSEG
                 _0x9:
000260           	.BYTE 0x15
                 ;char keyboard_read(void){
                 ; 0000 0028 char keyboard_read(void){
                 
                 	.CSEG
                 _keyboard_read:
                 ; .FSTART _keyboard_read
                 ; 0000 0029 
                 ; 0000 002A     //step 1 ofoghi A
                 ; 0000 002B     PORTB.4=0;
0000af 98c4      	CBI  0x18,4
                 ; 0000 002C     delay_ms(5);
0000b0 940e 0310 	CALL SUBOPT_0x0
                 ; 0000 002D     if(PINB.0 == 0) key= 7;
0000b2 99b0      	SBIC 0x16,0
0000b3 c003      	RJMP _0xD
0000b4 e0e7      	LDI  R30,LOW(7)
0000b5 e0f0      	LDI  R31,HIGH(7)
0000b6 012f      	MOVW R4,R30
                 ; 0000 002E     if(PINB.1 == 0) key= 8;
                 _0xD:
0000b7 99b1      	SBIC 0x16,1
0000b8 c003      	RJMP _0xE
0000b9 e0e8      	LDI  R30,LOW(8)
0000ba e0f0      	LDI  R31,HIGH(8)
0000bb 012f      	MOVW R4,R30
                 ; 0000 002F     if(PINB.2 == 0) key= 9;
                 _0xE:
0000bc 99b2      	SBIC 0x16,2
0000bd c003      	RJMP _0xF
0000be e0e9      	LDI  R30,LOW(9)
0000bf e0f0      	LDI  R31,HIGH(9)
0000c0 012f      	MOVW R4,R30
                 ; 0000 0030     //if(PINB.3==0) key= '/';
                 ; 0000 0031     PORTB.4=1;
                 _0xF:
0000c1 9ac4      	SBI  0x18,4
                 ; 0000 0032     //step 2 ofoghi B
                 ; 0000 0033     PORTB.5 = 0;
0000c2 98c5      	CBI  0x18,5
                 ; 0000 0034     delay_ms(5);
0000c3 940e 0310 	CALL SUBOPT_0x0
                 ; 0000 0035     if(PINB.0 == 0) key = 4;
0000c5 99b0      	SBIC 0x16,0
0000c6 c003      	RJMP _0x14
0000c7 e0e4      	LDI  R30,LOW(4)
0000c8 e0f0      	LDI  R31,HIGH(4)
0000c9 012f      	MOVW R4,R30
                 ; 0000 0036     if(PINB.1 == 0) key = 5;
                 _0x14:
0000ca 99b1      	SBIC 0x16,1
0000cb c003      	RJMP _0x15
0000cc e0e5      	LDI  R30,LOW(5)
0000cd e0f0      	LDI  R31,HIGH(5)
0000ce 012f      	MOVW R4,R30
                 ; 0000 0037     if(PINB.2 == 0) key = 6;
                 _0x15:
0000cf 99b2      	SBIC 0x16,2
0000d0 c003      	RJMP _0x16
0000d1 e0e6      	LDI  R30,LOW(6)
0000d2 e0f0      	LDI  R31,HIGH(6)
0000d3 012f      	MOVW R4,R30
                 ; 0000 0038     if(PINB.3 == 0) flag = 1; //zarb varedshode
                 _0x16:
0000d4 99b3      	SBIC 0x16,3
0000d5 c003      	RJMP _0x17
0000d6 e0e1      	LDI  R30,LOW(1)
0000d7 e0f0      	LDI  R31,HIGH(1)
0000d8 013f      	MOVW R6,R30
                 ; 0000 0039     PORTB.5 = 1;
                 _0x17:
0000d9 9ac5      	SBI  0x18,5
                 ; 0000 003A     //step 3 ofoghi C
                 ; 0000 003B     PORTB.6 = 0;
0000da 98c6      	CBI  0x18,6
                 ; 0000 003C     delay_ms(5);
0000db 940e 0310 	CALL SUBOPT_0x0
                 ; 0000 003D     if(PINB.0 == 0) key = 1;
0000dd 99b0      	SBIC 0x16,0
0000de c003      	RJMP _0x1C
0000df e0e1      	LDI  R30,LOW(1)
0000e0 e0f0      	LDI  R31,HIGH(1)
0000e1 012f      	MOVW R4,R30
                 ; 0000 003E     if(PINB.1 == 0) key = 2;
                 _0x1C:
0000e2 99b1      	SBIC 0x16,1
0000e3 c003      	RJMP _0x1D
0000e4 e0e2      	LDI  R30,LOW(2)
0000e5 e0f0      	LDI  R31,HIGH(2)
0000e6 012f      	MOVW R4,R30
                 ; 0000 003F     if(PINB.2 == 0) key = 3;
                 _0x1D:
0000e7 99b2      	SBIC 0x16,2
0000e8 c003      	RJMP _0x1E
0000e9 e0e3      	LDI  R30,LOW(3)
0000ea e0f0      	LDI  R31,HIGH(3)
0000eb 012f      	MOVW R4,R30
                 ; 0000 0040     //if(PINB.3==0) key='-';
                 ; 0000 0041     PORTB.6 = 1;
                 _0x1E:
0000ec 9ac6      	SBI  0x18,6
                 ; 0000 0042     //step 4 ofoghi D
                 ; 0000 0043     PORTB.7 = 0;
0000ed 98c7      	CBI  0x18,7
                 ; 0000 0044     delay_ms(5);
0000ee 940e 0310 	CALL SUBOPT_0x0
                 ; 0000 0045     if(PINB.0 == 0) on = 1;
0000f0 99b0      	SBIC 0x16,0
0000f1 c003      	RJMP _0x23
0000f2 e0e1      	LDI  R30,LOW(1)
0000f3 e0f0      	LDI  R31,HIGH(1)
0000f4 015f      	MOVW R10,R30
                 ; 0000 0046     if(PINB.1 == 0) key = 0;
                 _0x23:
0000f5 99b1      	SBIC 0x16,1
0000f6 c002      	RJMP _0x24
0000f7 2444      	CLR  R4
0000f8 2455      	CLR  R5
                 ; 0000 0047     //if(PINB.2==0) key='=';
                 ; 0000 0048     //if(PINB.3==0) key='+';
                 ; 0000 0049     PORTB.4 = 1;
                 _0x24:
0000f9 9ac4      	SBI  0x18,4
                 ; 0000 004A 
                 ; 0000 004B return key;
0000fa 2de4      	MOV  R30,R4
0000fb 9508      	RET
                 ; 0000 004C }
                 ; .FEND
                 ;
                 ;void main (void){
                 ; 0000 004E void main (void){
                 _main:
                 ; .FSTART _main
                 ; 0000 004F     DDRB = 0xF0;
0000fc efe0      	LDI  R30,LOW(240)
0000fd bbe7      	OUT  0x17,R30
                 ; 0000 0050     DDRC = 0XFF;//This register is used for selecting the R/S and R/W pin.
0000fe efef      	LDI  R30,LOW(255)
0000ff bbe4      	OUT  0x14,R30
                 ; 0000 0051 	DDRD = 0XFF;//This register is used to give the data or commands.
000100 bbe1      	OUT  0x11,R30
                 ; 0000 0052 	command(0x38);//Activated 2 lines in 8-bit mode.
000101 e3a8      	LDI  R26,LOW(56)
000102 d029      	RCALL _command
                 ; 0000 0053 	command(0X0F);//Display is ON, cursor is blinking.
000103 e0af      	LDI  R26,LOW(15)
000104 d027      	RCALL _command
                 ; 0000 0054 	command(0x01);//Clearing the display.
000105 e0a1      	LDI  R26,LOW(1)
000106 d025      	RCALL _command
                 ; 0000 0055         while(1){
                 _0x27:
                 ; 0000 0056         command(0X80);//Forced the cursor to first position of first line.
000107 e8a0      	LDI  R26,LOW(128)
000108 d023      	RCALL _command
                 ; 0000 0057         keyboard_read();
000109 dfa5      	RCALL _keyboard_read
                 ; 0000 0058         //tabe kam ya ziad shodan ra tashkhis bede
                 ; 0000 0059         encr_decr();
00010a df79      	RCALL _encr_decr
                 ; 0000 005A         sprintf(adad,"%d",key);
00010b e7e5      	LDI  R30,LOW(_adad)
00010c e0f2      	LDI  R31,HIGH(_adad)
00010d 93fa      	ST   -Y,R31
00010e 93ea      	ST   -Y,R30
                +
00010f e8e5     +LDI R30 , LOW ( 2 * _0x0 + ( 21 ) )
000110 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 21 ) )
                 	__POINTW1FN _0x0,21
000111 93fa      	ST   -Y,R31
000112 93ea      	ST   -Y,R30
000113 01f2      	MOVW R30,R4
000114 940e 035a 	CALL __CWD1
000116 940e 0367 	CALL __PUTPARD1
000118 e084      	LDI  R24,4
000119 940e 02c3 	CALL _sprintf
00011b 9628      	ADIW R28,8
                 ; 0000 005B         lcd_print(adad);
00011c 940e 0314 	CALL SUBOPT_0x1
                 ; 0000 005C         delay_ms(1000);
                 ; 0000 005D         command(0X80);//Forced the cursor to first position of first line.
00011e e8a0      	LDI  R26,LOW(128)
00011f d00c      	RCALL _command
                 ; 0000 005E         lcd_print(adad);
000120 940e 0314 	CALL SUBOPT_0x1
                 ; 0000 005F         delay_ms(1000);
                 ; 0000 0060         on = 0;
000122 24aa      	CLR  R10
000123 24bb      	CLR  R11
                 ; 0000 0061         command(0X01);//Clearing the display.
000124 e0a1      	LDI  R26,LOW(1)
000125 d006      	RCALL _command
                 ; 0000 0062 	    delay_ms(1000);
000126 eea8      	LDI  R26,LOW(1000)
000127 e0b3      	LDI  R27,HIGH(1000)
000128 940e 0348 	CALL _delay_ms
                 ; 0000 0063 }}
00012a cfdc      	RJMP _0x27
                 _0x2A:
00012b cfff      	RJMP _0x2A
                 ; .FEND
                 ;void command (char cmd)
                 ; 0000 0065 {
                 _command:
                 ; .FSTART _command
                 ; 0000 0066 	PORTC = 0X02;
00012c 93aa      	ST   -Y,R26
                 ;	cmd -> Y+0
00012d e0e2      	LDI  R30,LOW(2)
00012e bbe5      	OUT  0x15,R30
                 ; 0000 0067 	PORTD = cmd;
00012f 81e8      	LD   R30,Y
000130 bbe2      	OUT  0x12,R30
                 ; 0000 0068 	PORTC = 0X00;
000131 e0e0      	LDI  R30,LOW(0)
000132 c006      	RJMP _0x20A0002
                 ; 0000 0069 	delay_ms(15);
                 ; 0000 006A }
                 ; .FEND
                 ;void lcd_data(char data)
                 ; 0000 006C {
                 _lcd_data:
                 ; .FSTART _lcd_data
                 ; 0000 006D 	PORTC = 0X03;
000133 93aa      	ST   -Y,R26
                 ;	data -> Y+0
000134 e0e3      	LDI  R30,LOW(3)
000135 bbe5      	OUT  0x15,R30
                 ; 0000 006E 	PORTD = data;
000136 81e8      	LD   R30,Y
000137 bbe2      	OUT  0x12,R30
                 ; 0000 006F 	PORTC = 0X01;
000138 e0e1      	LDI  R30,LOW(1)
                 _0x20A0002:
000139 bbe5      	OUT  0x15,R30
                 ; 0000 0070 	delay_ms(15);
00013a e0af      	LDI  R26,LOW(15)
00013b e0b0      	LDI  R27,0
00013c 940e 0348 	CALL _delay_ms
                 ; 0000 0071 }
00013e 9621      	ADIW R28,1
00013f 9508      	RET
                 ; .FEND
                 ;void lcd_print(char *p)
                 ; 0000 0073 {
                 _lcd_print:
                 ; .FSTART _lcd_print
                 ; 0000 0074 	while(*p)
000140 93ba      	ST   -Y,R27
000141 93aa      	ST   -Y,R26
                 ;	*p -> Y+0
                 _0x2B:
000142 81a8      	LD   R26,Y
000143 81b9      	LDD  R27,Y+1
000144 91ec      	LD   R30,X
000145 30e0      	CPI  R30,0
000146 f031      	BREQ _0x2D
                 ; 0000 0075 	{
                 ; 0000 0076 		lcd_data(*p++);
000147 91ed      	LD   R30,X+
000148 83a8      	ST   Y,R26
000149 83b9      	STD  Y+1,R27
00014a 2fae      	MOV  R26,R30
00014b dfe7      	RCALL _lcd_data
                 ; 0000 0077 	}
00014c cff5      	RJMP _0x2B
                 _0x2D:
                 ; 0000 0078 }
00014d 9622      	ADIW R28,2
00014e 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
00014f 93ba      	ST   -Y,R27
000150 93aa      	ST   -Y,R26
000151 931a      	ST   -Y,R17
000152 930a      	ST   -Y,R16
000153 81aa      	LDD  R26,Y+2
000154 81bb      	LDD  R27,Y+2+1
000155 9612      	ADIW R26,2
000156 940e 035f 	CALL __GETW1P
000158 9730      	SBIW R30,0
000159 f159      	BREQ _0x2000010
00015a 81aa      	LDD  R26,Y+2
00015b 81bb      	LDD  R27,Y+2+1
00015c 9614      	ADIW R26,4
00015d 940e 035f 	CALL __GETW1P
00015f 018f      	MOVW R16,R30
000160 9730      	SBIW R30,0
000161 f061      	BREQ _0x2000012
                +
000162 3002     +CPI R16 , LOW ( 2 )
000163 e0e0     +LDI R30 , HIGH ( 2 )
000164 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000165 f098      	BRLO _0x2000013
000166 01f8      	MOVW R30,R16
000167 9731      	SBIW R30,1
000168 018f      	MOVW R16,R30
                +
000169 81aa     +LDD R26 , Y + 2
00016a 81bb     +LDD R27 , Y + 2 + 1
00016b 9614     +ADIW R26 , 4
00016c 93ed     +ST X + , R30
00016d 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
00016e 81aa      	LDD  R26,Y+2
00016f 81bb      	LDD  R27,Y+2+1
000170 9612      	ADIW R26,2
000171 91ed      	LD   R30,X+
000172 91fd      	LD   R31,X+
000173 9631      	ADIW R30,1
000174 93fe      	ST   -X,R31
000175 93ee      	ST   -X,R30
000176 9731      	SBIW R30,1
000177 81ac      	LDD  R26,Y+4
000178 83a0      	STD  Z+0,R26
                 _0x2000013:
000179 81aa      	LDD  R26,Y+2
00017a 81bb      	LDD  R27,Y+2+1
00017b 940e 035f 	CALL __GETW1P
00017d 23ff      	TST  R31
00017e f02a      	BRMI _0x2000014
00017f 91ed      	LD   R30,X+
000180 91fd      	LD   R31,X+
000181 9631      	ADIW R30,1
000182 93fe      	ST   -X,R31
000183 93ee      	ST   -X,R30
                 _0x2000014:
000184 c006      	RJMP _0x2000015
                 _0x2000010:
000185 81aa      	LDD  R26,Y+2
000186 81bb      	LDD  R27,Y+2+1
000187 efef      	LDI  R30,LOW(65535)
000188 efff      	LDI  R31,HIGH(65535)
000189 93ed      	ST   X+,R30
00018a 93fc      	ST   X,R31
                 _0x2000015:
00018b 8119      	LDD  R17,Y+1
00018c 8108      	LDD  R16,Y+0
00018d 9625      	ADIW R28,5
00018e 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
00018f 93ba      	ST   -Y,R27
000190 93aa      	ST   -Y,R26
000191 9726      	SBIW R28,6
000192 940e 036c 	CALL __SAVELOCR6
000194 e010      	LDI  R17,0
000195 85ac      	LDD  R26,Y+12
000196 85bd      	LDD  R27,Y+12+1
000197 e0e0      	LDI  R30,LOW(0)
000198 e0f0      	LDI  R31,HIGH(0)
000199 93ed      	ST   X+,R30
00019a 93fc      	ST   X,R31
                 _0x2000016:
00019b 89ea      	LDD  R30,Y+18
00019c 89fb      	LDD  R31,Y+18+1
00019d 9631      	ADIW R30,1
00019e 8bea      	STD  Y+18,R30
00019f 8bfb      	STD  Y+18+1,R31
0001a0 9731      	SBIW R30,1
0001a1 91e4      	LPM  R30,Z
0001a2 2f2e      	MOV  R18,R30
0001a3 30e0      	CPI  R30,0
0001a4 f409      	BRNE PC+2
0001a5 c115      	RJMP _0x2000018
0001a6 2fe1      	MOV  R30,R17
0001a7 30e0      	CPI  R30,0
0001a8 f439      	BRNE _0x200001C
0001a9 3225      	CPI  R18,37
0001aa f411      	BRNE _0x200001D
0001ab e011      	LDI  R17,LOW(1)
0001ac c002      	RJMP _0x200001E
                 _0x200001D:
0001ad 940e 031c 	CALL SUBOPT_0x2
                 _0x200001E:
0001af c10a      	RJMP _0x200001B
                 _0x200001C:
0001b0 30e1      	CPI  R30,LOW(0x1)
0001b1 f4a9      	BRNE _0x200001F
0001b2 3225      	CPI  R18,37
0001b3 f419      	BRNE _0x2000020
0001b4 940e 031c 	CALL SUBOPT_0x2
0001b6 c102      	RJMP _0x20000CC
                 _0x2000020:
0001b7 e012      	LDI  R17,LOW(2)
0001b8 e040      	LDI  R20,LOW(0)
0001b9 e000      	LDI  R16,LOW(0)
0001ba 322d      	CPI  R18,45
0001bb f411      	BRNE _0x2000021
0001bc e001      	LDI  R16,LOW(1)
0001bd c0fc      	RJMP _0x200001B
                 _0x2000021:
0001be 322b      	CPI  R18,43
0001bf f411      	BRNE _0x2000022
0001c0 e24b      	LDI  R20,LOW(43)
0001c1 c0f8      	RJMP _0x200001B
                 _0x2000022:
0001c2 3220      	CPI  R18,32
0001c3 f411      	BRNE _0x2000023
0001c4 e240      	LDI  R20,LOW(32)
0001c5 c0f4      	RJMP _0x200001B
                 _0x2000023:
0001c6 c002      	RJMP _0x2000024
                 _0x200001F:
0001c7 30e2      	CPI  R30,LOW(0x2)
0001c8 f439      	BRNE _0x2000025
                 _0x2000024:
0001c9 e050      	LDI  R21,LOW(0)
0001ca e013      	LDI  R17,LOW(3)
0001cb 3320      	CPI  R18,48
0001cc f411      	BRNE _0x2000026
0001cd 6800      	ORI  R16,LOW(128)
0001ce c0eb      	RJMP _0x200001B
                 _0x2000026:
0001cf c003      	RJMP _0x2000027
                 _0x2000025:
0001d0 30e3      	CPI  R30,LOW(0x3)
0001d1 f009      	BREQ PC+2
0001d2 c0e7      	RJMP _0x200001B
                 _0x2000027:
0001d3 3320      	CPI  R18,48
0001d4 f010      	BRLO _0x200002A
0001d5 332a      	CPI  R18,58
0001d6 f008      	BRLO _0x200002B
                 _0x200002A:
0001d7 c007      	RJMP _0x2000029
                 _0x200002B:
0001d8 e0aa      	LDI  R26,LOW(10)
0001d9 9f5a      	MUL  R21,R26
0001da 2d50      	MOV  R21,R0
0001db 2fe2      	MOV  R30,R18
0001dc 53e0      	SUBI R30,LOW(48)
0001dd 0f5e      	ADD  R21,R30
0001de c0db      	RJMP _0x200001B
                 _0x2000029:
0001df 2fe2      	MOV  R30,R18
0001e0 36e3      	CPI  R30,LOW(0x63)
0001e1 f449      	BRNE _0x200002F
0001e2 940e 0323 	CALL SUBOPT_0x3
0001e4 89e8      	LDD  R30,Y+16
0001e5 89f9      	LDD  R31,Y+16+1
0001e6 81a4      	LDD  R26,Z+4
0001e7 93aa      	ST   -Y,R26
0001e8 940e 0329 	CALL SUBOPT_0x4
0001ea c0ce      	RJMP _0x2000030
                 _0x200002F:
0001eb 37e3      	CPI  R30,LOW(0x73)
0001ec f441      	BRNE _0x2000032
0001ed 940e 0323 	CALL SUBOPT_0x3
0001ef 940e 032f 	CALL SUBOPT_0x5
0001f1 940e 02f7 	CALL _strlen
0001f3 2f1e      	MOV  R17,R30
0001f4 c00a      	RJMP _0x2000033
                 _0x2000032:
0001f5 37e0      	CPI  R30,LOW(0x70)
0001f6 f461      	BRNE _0x2000035
0001f7 940e 0323 	CALL SUBOPT_0x3
0001f9 940e 032f 	CALL SUBOPT_0x5
0001fb 940e 0303 	CALL _strlenf
0001fd 2f1e      	MOV  R17,R30
0001fe 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0001ff 6002      	ORI  R16,LOW(2)
000200 770f      	ANDI R16,LOW(127)
000201 e030      	LDI  R19,LOW(0)
000202 c034      	RJMP _0x2000036
                 _0x2000035:
000203 36e4      	CPI  R30,LOW(0x64)
000204 f011      	BREQ _0x2000039
000205 36e9      	CPI  R30,LOW(0x69)
000206 f411      	BRNE _0x200003A
                 _0x2000039:
000207 6004      	ORI  R16,LOW(4)
000208 c002      	RJMP _0x200003B
                 _0x200003A:
000209 37e5      	CPI  R30,LOW(0x75)
00020a f431      	BRNE _0x200003C
                 _0x200003B:
00020b e5e4      	LDI  R30,LOW(_tbl10_G100*2)
00020c e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00020d 83ee      	STD  Y+6,R30
00020e 83ff      	STD  Y+6+1,R31
00020f e015      	LDI  R17,LOW(5)
000210 c00c      	RJMP _0x200003D
                 _0x200003C:
000211 35e8      	CPI  R30,LOW(0x58)
000212 f411      	BRNE _0x200003F
000213 6008      	ORI  R16,LOW(8)
000214 c003      	RJMP _0x2000040
                 _0x200003F:
000215 37e8      	CPI  R30,LOW(0x78)
000216 f009      	BREQ PC+2
000217 c0a1      	RJMP _0x2000071
                 _0x2000040:
000218 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000219 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
00021a 83ee      	STD  Y+6,R30
00021b 83ff      	STD  Y+6+1,R31
00021c e014      	LDI  R17,LOW(4)
                 _0x200003D:
00021d ff02      	SBRS R16,2
00021e c014      	RJMP _0x2000042
00021f 940e 0323 	CALL SUBOPT_0x3
000221 940e 0339 	CALL SUBOPT_0x6
000223 85ab      	LDD  R26,Y+11
000224 23aa      	TST  R26
000225 f43a      	BRPL _0x2000043
000226 85ea      	LDD  R30,Y+10
000227 85fb      	LDD  R31,Y+10+1
000228 940e 0356 	CALL __ANEGW1
00022a 87ea      	STD  Y+10,R30
00022b 87fb      	STD  Y+10+1,R31
00022c e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00022d 3040      	CPI  R20,0
00022e f011      	BREQ _0x2000044
00022f 5f1f      	SUBI R17,-LOW(1)
000230 c001      	RJMP _0x2000045
                 _0x2000044:
000231 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000232 c004      	RJMP _0x2000046
                 _0x2000042:
000233 940e 0323 	CALL SUBOPT_0x3
000235 940e 0339 	CALL SUBOPT_0x6
                 _0x2000046:
                 _0x2000036:
000237 fd00      	SBRC R16,0
000238 c011      	RJMP _0x2000047
                 _0x2000048:
000239 1715      	CP   R17,R21
00023a f478      	BRSH _0x200004A
00023b ff07      	SBRS R16,7
00023c c008      	RJMP _0x200004B
00023d ff02      	SBRS R16,2
00023e c004      	RJMP _0x200004C
00023f 7f0b      	ANDI R16,LOW(251)
000240 2f24      	MOV  R18,R20
000241 5011      	SUBI R17,LOW(1)
000242 c001      	RJMP _0x200004D
                 _0x200004C:
000243 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000244 c001      	RJMP _0x200004E
                 _0x200004B:
000245 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000246 940e 031c 	CALL SUBOPT_0x2
000248 5051      	SUBI R21,LOW(1)
000249 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
00024a 2f31      	MOV  R19,R17
00024b ff01      	SBRS R16,1
00024c c017      	RJMP _0x200004F
                 _0x2000050:
00024d 3030      	CPI  R19,0
00024e f0a1      	BREQ _0x2000052
00024f ff03      	SBRS R16,3
000250 c006      	RJMP _0x2000053
000251 81ee      	LDD  R30,Y+6
000252 81ff      	LDD  R31,Y+6+1
000253 9125      	LPM  R18,Z+
000254 83ee      	STD  Y+6,R30
000255 83ff      	STD  Y+6+1,R31
000256 c005      	RJMP _0x2000054
                 _0x2000053:
000257 81ae      	LDD  R26,Y+6
000258 81bf      	LDD  R27,Y+6+1
000259 912d      	LD   R18,X+
00025a 83ae      	STD  Y+6,R26
00025b 83bf      	STD  Y+6+1,R27
                 _0x2000054:
00025c 940e 031c 	CALL SUBOPT_0x2
00025e 3050      	CPI  R21,0
00025f f009      	BREQ _0x2000055
000260 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000261 5031      	SUBI R19,LOW(1)
000262 cfea      	RJMP _0x2000050
                 _0x2000052:
000263 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000264 e320      	LDI  R18,LOW(48)
000265 81ee      	LDD  R30,Y+6
000266 81ff      	LDD  R31,Y+6+1
000267 940e 0363 	CALL __GETW1PF
000269 87e8      	STD  Y+8,R30
00026a 87f9      	STD  Y+8+1,R31
00026b 81ee      	LDD  R30,Y+6
00026c 81ff      	LDD  R31,Y+6+1
00026d 9632      	ADIW R30,2
00026e 83ee      	STD  Y+6,R30
00026f 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000270 85e8      	LDD  R30,Y+8
000271 85f9      	LDD  R31,Y+8+1
000272 85aa      	LDD  R26,Y+10
000273 85bb      	LDD  R27,Y+10+1
000274 17ae      	CP   R26,R30
000275 07bf      	CPC  R27,R31
000276 f050      	BRLO _0x200005C
000277 5f2f      	SUBI R18,-LOW(1)
000278 85a8      	LDD  R26,Y+8
000279 85b9      	LDD  R27,Y+8+1
00027a 85ea      	LDD  R30,Y+10
00027b 85fb      	LDD  R31,Y+10+1
00027c 1bea      	SUB  R30,R26
00027d 0bfb      	SBC  R31,R27
00027e 87ea      	STD  Y+10,R30
00027f 87fb      	STD  Y+10+1,R31
000280 cfef      	RJMP _0x200005A
                 _0x200005C:
000281 332a      	CPI  R18,58
000282 f028      	BRLO _0x200005D
000283 ff03      	SBRS R16,3
000284 c002      	RJMP _0x200005E
000285 5f29      	SUBI R18,-LOW(7)
000286 c001      	RJMP _0x200005F
                 _0x200005E:
000287 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000288 fd04      	SBRC R16,4
000289 c01a      	RJMP _0x2000061
00028a 3321      	CPI  R18,49
00028b f420      	BRSH _0x2000063
00028c 85a8      	LDD  R26,Y+8
00028d 85b9      	LDD  R27,Y+8+1
00028e 9711      	SBIW R26,1
00028f f409      	BRNE _0x2000062
                 _0x2000063:
000290 c009      	RJMP _0x20000CD
                 _0x2000062:
000291 1753      	CP   R21,R19
000292 f010      	BRLO _0x2000067
000293 ff00      	SBRS R16,0
000294 c001      	RJMP _0x2000068
                 _0x2000067:
000295 c013      	RJMP _0x2000066
                 _0x2000068:
000296 e220      	LDI  R18,LOW(32)
000297 ff07      	SBRS R16,7
000298 c00b      	RJMP _0x2000069
000299 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
00029a 6100      	ORI  R16,LOW(16)
00029b ff02      	SBRS R16,2
00029c c007      	RJMP _0x200006A
00029d 7f0b      	ANDI R16,LOW(251)
00029e 934a      	ST   -Y,R20
00029f 940e 0329 	CALL SUBOPT_0x4
0002a1 3050      	CPI  R21,0
0002a2 f009      	BREQ _0x200006B
0002a3 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0002a4 940e 031c 	CALL SUBOPT_0x2
0002a6 3050      	CPI  R21,0
0002a7 f009      	BREQ _0x200006C
0002a8 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0002a9 5031      	SUBI R19,LOW(1)
0002aa 85a8      	LDD  R26,Y+8
0002ab 85b9      	LDD  R27,Y+8+1
0002ac 9712      	SBIW R26,2
0002ad f008      	BRLO _0x2000059
0002ae cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0002af ff00      	SBRS R16,0
0002b0 c008      	RJMP _0x200006D
                 _0x200006E:
0002b1 3050      	CPI  R21,0
0002b2 f031      	BREQ _0x2000070
0002b3 5051      	SUBI R21,LOW(1)
0002b4 e2e0      	LDI  R30,LOW(32)
0002b5 93ea      	ST   -Y,R30
0002b6 940e 0329 	CALL SUBOPT_0x4
0002b8 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0002b9 e010      	LDI  R17,LOW(0)
                 _0x200001B:
0002ba cee0      	RJMP _0x2000016
                 _0x2000018:
0002bb 85ac      	LDD  R26,Y+12
0002bc 85bd      	LDD  R27,Y+12+1
0002bd 940e 035f 	CALL __GETW1P
0002bf 940e 0373 	CALL __LOADLOCR6
0002c1 9664      	ADIW R28,20
0002c2 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0002c3 92ff      	PUSH R15
0002c4 2ef8      	MOV  R15,R24
0002c5 9726      	SBIW R28,6
0002c6 940e 036e 	CALL __SAVELOCR4
0002c8 940e 0341 	CALL SUBOPT_0x7
0002ca 9730      	SBIW R30,0
0002cb f419      	BRNE _0x2000072
0002cc efef      	LDI  R30,LOW(65535)
0002cd efff      	LDI  R31,HIGH(65535)
0002ce c023      	RJMP _0x20A0001
                 _0x2000072:
0002cf 01de      	MOVW R26,R28
0002d0 9616      	ADIW R26,6
0002d1 940e 0352 	CALL __ADDW2R15
0002d3 018d      	MOVW R16,R26
0002d4 940e 0341 	CALL SUBOPT_0x7
0002d6 83ee      	STD  Y+6,R30
0002d7 83ff      	STD  Y+6+1,R31
0002d8 e0e0      	LDI  R30,LOW(0)
0002d9 87e8      	STD  Y+8,R30
0002da 87e9      	STD  Y+8+1,R30
0002db 01de      	MOVW R26,R28
0002dc 961a      	ADIW R26,10
0002dd 940e 0352 	CALL __ADDW2R15
0002df 940e 035f 	CALL __GETW1P
0002e1 93fa      	ST   -Y,R31
0002e2 93ea      	ST   -Y,R30
0002e3 931a      	ST   -Y,R17
0002e4 930a      	ST   -Y,R16
0002e5 e4ef      	LDI  R30,LOW(_put_buff_G100)
0002e6 e0f1      	LDI  R31,HIGH(_put_buff_G100)
0002e7 93fa      	ST   -Y,R31
0002e8 93ea      	ST   -Y,R30
0002e9 01de      	MOVW R26,R28
0002ea 961a      	ADIW R26,10
0002eb dea3      	RCALL __print_G100
0002ec 019f      	MOVW R18,R30
0002ed 81ae      	LDD  R26,Y+6
0002ee 81bf      	LDD  R27,Y+6+1
0002ef e0e0      	LDI  R30,LOW(0)
0002f0 93ec      	ST   X,R30
0002f1 01f9      	MOVW R30,R18
                 _0x20A0001:
0002f2 940e 0375 	CALL __LOADLOCR4
0002f4 962a      	ADIW R28,10
0002f5 90ff      	POP  R15
0002f6 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0002f7 93ba      	ST   -Y,R27
0002f8 93aa      	ST   -Y,R26
0002f9 91a9          ld   r26,y+
0002fa 91b9          ld   r27,y+
0002fb 27ee          clr  r30
0002fc 27ff          clr  r31
                 strlen0:
0002fd 916d          ld   r22,x+
0002fe 2366          tst  r22
0002ff f011          breq strlen1
000300 9631          adiw r30,1
000301 cffb          rjmp strlen0
                 strlen1:
000302 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000303 93ba      	ST   -Y,R27
000304 93aa      	ST   -Y,R26
000305 27aa          clr  r26
000306 27bb          clr  r27
000307 91e9          ld   r30,y+
000308 91f9          ld   r31,y+
                 strlenf0:
000309 9005      	lpm  r0,z+
00030a 2000          tst  r0
00030b f011          breq strlenf1
00030c 9611          adiw r26,1
00030d cffb          rjmp strlenf0
                 strlenf1:
00030e 01fd          movw r30,r26
00030f 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _adad:
000275           	.BYTE 0xF
                 __seed_G101:
000284           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000310 e0a5      	LDI  R26,LOW(5)
000311 e0b0      	LDI  R27,0
000312 940c 0348 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
000314 e7a5      	LDI  R26,LOW(_adad)
000315 e0b2      	LDI  R27,HIGH(_adad)
000316 940e 0140 	CALL _lcd_print
000318 eea8      	LDI  R26,LOW(1000)
000319 e0b3      	LDI  R27,HIGH(1000)
00031a 940c 0348 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2:
00031c 932a      	ST   -Y,R18
00031d 85ad      	LDD  R26,Y+13
00031e 85be      	LDD  R27,Y+13+1
00031f 85ef      	LDD  R30,Y+15
000320 89f8      	LDD  R31,Y+15+1
000321 9509      	ICALL
000322 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
000323 89e8      	LDD  R30,Y+16
000324 89f9      	LDD  R31,Y+16+1
000325 9734      	SBIW R30,4
000326 8be8      	STD  Y+16,R30
000327 8bf9      	STD  Y+16+1,R31
000328 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
000329 85ad      	LDD  R26,Y+13
00032a 85be      	LDD  R27,Y+13+1
00032b 85ef      	LDD  R30,Y+15
00032c 89f8      	LDD  R31,Y+15+1
00032d 9509      	ICALL
00032e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
00032f 89a8      	LDD  R26,Y+16
000330 89b9      	LDD  R27,Y+16+1
000331 9614      	ADIW R26,4
000332 940e 035f 	CALL __GETW1P
000334 83ee      	STD  Y+6,R30
000335 83ff      	STD  Y+6+1,R31
000336 81ae      	LDD  R26,Y+6
000337 81bf      	LDD  R27,Y+6+1
000338 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
000339 89a8      	LDD  R26,Y+16
00033a 89b9      	LDD  R27,Y+16+1
00033b 9614      	ADIW R26,4
00033c 940e 035f 	CALL __GETW1P
00033e 87ea      	STD  Y+10,R30
00033f 87fb      	STD  Y+10+1,R31
000340 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000341 01de      	MOVW R26,R28
000342 961c      	ADIW R26,12
000343 940e 0352 	CALL __ADDW2R15
000345 940e 035f 	CALL __GETW1P
000347 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000348 9610      	adiw r26,0
000349 f039      	breq __delay_ms1
                 __delay_ms0:
                +
00034a ed80     +LDI R24 , LOW ( 0x7D0 )
00034b e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00034c 9701     +SBIW R24 , 1
00034d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00034e 95a8      	wdr
00034f 9711      	sbiw r26,1
000350 f7c9      	brne __delay_ms0
                 __delay_ms1:
000351 9508      	ret
                 
                 __ADDW2R15:
000352 2400      	CLR  R0
000353 0daf      	ADD  R26,R15
000354 1db0      	ADC  R27,R0
000355 9508      	RET
                 
                 __ANEGW1:
000356 95f1      	NEG  R31
000357 95e1      	NEG  R30
000358 40f0      	SBCI R31,0
000359 9508      	RET
                 
                 __CWD1:
00035a 2f6f      	MOV  R22,R31
00035b 0f66      	ADD  R22,R22
00035c 0b66      	SBC  R22,R22
00035d 2f76      	MOV  R23,R22
00035e 9508      	RET
                 
                 __GETW1P:
00035f 91ed      	LD   R30,X+
000360 91fc      	LD   R31,X
000361 9711      	SBIW R26,1
000362 9508      	RET
                 
                 __GETW1PF:
000363 9005      	LPM  R0,Z+
000364 91f4      	LPM  R31,Z
000365 2de0      	MOV  R30,R0
000366 9508      	RET
                 
                 __PUTPARD1:
000367 937a      	ST   -Y,R23
000368 936a      	ST   -Y,R22
000369 93fa      	ST   -Y,R31
00036a 93ea      	ST   -Y,R30
00036b 9508      	RET
                 
                 __SAVELOCR6:
00036c 935a      	ST   -Y,R21
                 __SAVELOCR5:
00036d 934a      	ST   -Y,R20
                 __SAVELOCR4:
00036e 933a      	ST   -Y,R19
                 __SAVELOCR3:
00036f 932a      	ST   -Y,R18
                 __SAVELOCR2:
000370 931a      	ST   -Y,R17
000371 930a      	ST   -Y,R16
000372 9508      	RET
                 
                 __LOADLOCR6:
000373 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000374 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000375 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000376 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000377 8119      	LDD  R17,Y+1
000378 8108      	LD   R16,Y
000379 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  13 r1 :   1 r2 :   0 r3 :   0 r4 :  16 r5 :   1 r6 :   4 r7 :   2 
r8 :   3 r9 :   2 r10:   3 r11:   2 r12:   5 r13:   2 r14:   0 r15:   4 
r16:  34 r17:  20 r18:  29 r19:   8 r20:   9 r21:  17 r22:  11 r23:   2 
r24:  11 r25:   3 r26:  82 r27:  41 r28:  13 r29:   1 r30: 172 r31:  73 
x  :  24 y  : 146 z  :  14 
Registers used: 32 out of 35 (91.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   3 
adiw  :  24 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  17 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 
brlt  :   0 brmi  :   1 brne  :  27 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  50 
cbi   :   4 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  11 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   7 cpc   :   6 cpi   :  31 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   0 inc   :   0 jmp   :  24 ld    :  18 ldd   :  71 ldi   : 113 
lds   :   0 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  16 movw  :  34 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   6 out   :  14 pop   :   1 push  :   1 rcall :  13 ret   :  24 
reti  :   0 rjmp  :  69 rol   :   0 ror   :   0 sbc   :   2 sbci  :   1 
sbi   :   4 sbic  :  12 sbis  :   0 sbiw  :  18 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  53 std   :  30 sts   :   0 sub   :   1 subi  :  13 swap  :   0 
tst   :   4 wdr   :   1 
Instructions used: 49 out of 116 (42.2%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006f4   1690     90   1780   32768   5.4%
[.dseg] 0x000060 0x000288      0     40     40    2048   2.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 12 warnings
